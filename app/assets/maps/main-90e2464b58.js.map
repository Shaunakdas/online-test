{"version":3,"sources":["app/app.js","app/core/core.module.js","app/core/diagnostic-test/diagnostic-test.module.js","app/core/diagnostic-test/diagnostic-test.service.js","app/core/header/header.component.js","app/app.module.js","app/app.config.js","app/app.animations.js","app/online-test/online-test.module.js","app/online-test/online-test.component.js","app/online-test/attempt.component.js","app/online-test/result.component.js"],"names":["angular","module","factory","$resource","$rootScope","data","question_status_data","standard_id","stream_id","user","diagnostic_test_result","personalized","data_template","attempt_ready","getData","key","setData","value","Object","assign","getAllData","clearAllData","console","log","http","base_url_api","get_test","method","headers","Authorization","btoa","submit_test","url","get_standards","get_attempt_details","component","templateUrl","controller","DiagnosticTest","$scope","this","config","$locationProvider","$routeProvider","hashPrefix","when","template","otherwise","run","$http","animation","animateIn","element","className","done","css","display","position","top","left","animate","wasCanceled","stop","animateOut","addClass","removeClass","$routeParams","$location","self","standard_form_class","submitStudentForm","first_name","last_name","email","number","toString","count","standards","streams","subject_id","$","document","ready","html","test_start_text","test_params","personalization_type","diagnostic_test_id","build_diagnostic_test_data","current_question_index","change_question","question_index","parseInt","err","fetched_questions","length","reset_timer","class","attempt","current_question_start_time","Date","now","get_time_spent","get_displayed_question_index","diagnostic_test_data","diagnostic_test","id","short_choice_questions","questions","each","push","short_choice_question_id","question_text","attempt_count","index","score","time_taken","selected_answers","i","append","on","personalized_test_remaining","result","weak_entity","event","$apply","currentTarget","prop","select_answer","question_id","answer_index","answer_object","answers","present_question","correct","short_choice_answer_id","text","answer_text","max_score","max_time_allotted","time_elapsed","answer_selected","directive","refresh","MathJax","Hub","Queue","link","scope","attrs","$watch","mathJaxBind","newValue","oldValue","color_labels"],"mappings":"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","file":"main-90e2464b58.js","sourcesContent":["","'use strict';\n\nangular.module('core', ['core.diagnostic-test']);\n\n","angular.module('core.diagnostic-test', ['ngResource']);","angular.\n  module('core.diagnostic-test').\n  factory('DiagnosticTest', ['$resource', '$rootScope',\n    function($resource, $rootScope){\n      const data = {\n        'question_status_data' : {data:[]},\n        'standard_id' : {},\n        'stream_id'   : {},\n        'user': {},\n        'diagnostic_test_result':{},\n        'personalized':{},\n      }\n\n      const data_template = {\n        'question_status_data' : {data:[]},\n        'standard_id' : {},\n        'stream_id'   : {},\n        'user': {},\n        'diagnostic_test_result':{},\n        'personalized':{},\n      }\n\n      var attempt_ready = false;\n\n      return {\n          getData: function(key) {\n             return data[key].data\n          },\n          setData: function(key,value) {\n            Object.assign(data[key], value)\n          },\n\n          getAllData: function(){\n            return data\n          },\n\n          clearAllData: function(){\n            console.log(\"Cleaning DiagnosticTest service data\");\n            Object.assign(data, data_template);\n            attempt_ready = false\n            return true\n          },\n\n          attempt_ready: function(value){\n            if (value){\n              attempt_ready = value\n            }\n            return attempt_ready\n          },\n\n          http: $resource($rootScope.base_url_api + 'api/diagnostic_tests/get_test.json', {}, {\n            get_test: {\n              method: 'GET',\n              headers: {\"Authorization\" : \"Basic \" + btoa(\"education:education\") }\n            },\n\n            submit_test:{\n              method: 'POST',\n              url: $rootScope.base_url_api + 'api/diagnostic_tests/test_attempt.json',\n              headers: {\"Authorization\" : \"Basic \" + btoa(\"education:education\") },\n            },\n\n            get_standards: {\n              method: \"GET\",\n              url: $rootScope.base_url_api + \"api/standards/get_standards.json\",\n              headers: {\"Authorization\" : \"Basic \" + btoa(\"education:education\")}\n            },\n\n            get_attempt_details:{\n              method: \"GET\",\n              url: $rootScope.base_url_api + \"api/diagnostic_tests/get_attempt_details.json\",\n              headers: {\"Authorization\" : \"Basic \" + btoa(\"education:education\")}\n            },\n          }),\n\n      };\n    }\n  ]);","'use strict';\nangular.\n  module('core').\n  component('header', {\n    templateUrl: 'core/header/header.template.html',\n    controller: ['DiagnosticTest', '$scope',\n      function HeaderController(DiagnosticTest, $scope) {\n        this.question_status_data = DiagnosticTest.getData('question_status_data');\n      }\n    ]\n  })","'use strict';\n\n// Define the `phonecatApp` module\nangular.module('phonecatApp', [\n  'ngAnimate',\n  'ngRoute',\n  'core',\n  'ngAnimate',\n  'onlineTest'\n]);\n","'use strict';\n\nangular.\n  module('phonecatApp').\n  config(['$locationProvider' ,'$routeProvider',\n    function config($locationProvider, $routeProvider) {\n      $locationProvider.hashPrefix('!');\n\n      $routeProvider.\n        when('/online-test', {\n          template: '<online-test></online-test>'\n        }).\n        when('/online-test/attempt', {\n          template: '<attempt></attempt>'\n        }).\n        when('/online-test/result', {\n          template: '<result></result>'\n        }).\n        otherwise('/online-test');\n    }\n  ]);\n\nangular.module('phonecatApp')\n.run(['$rootScope','$http',function($rootScope, $http) {\n  $rootScope.base_url_api = \"https://www.hotelashokachomu.com/\"\n}])\n","'use strict';\n\nangular.\n  module('phonecatApp').\n  animation('.phone', function phoneAnimationFactory() {\n    return {\n      addClass: animateIn,\n      removeClass: animateOut\n    };\n\n    function animateIn(element, className, done) {\n      if (className !== 'selected') return;\n\n      element.css({\n        display: 'block',\n        position: 'absolute',\n        top: 500,\n        left: 0\n      }).animate({\n        top: 0\n      }, done);\n\n      return function animateInEnd(wasCanceled) {\n        if (wasCanceled) element.stop();\n      };\n    }\n\n    function animateOut(element, className, done) {\n      if (className !== 'selected') return;\n\n      element.css({\n        position: 'absolute',\n        top: 0,\n        left: 0\n      }).animate({\n        top: -500\n      }, done);\n\n      return function animateOutEnd(wasCanceled) {\n        if (wasCanceled) element.stop();\n      };\n    }\n  });\n","'use strict';\n\n// Define the `phoneDetail` module\nangular.module('onlineTest', []);","'use strict';\n\n// Register `phoneDetail` component, along with its associated controller and template\nangular.\n  module('onlineTest').\n  component('onlineTest', {\n    templateUrl: 'online-test/online-test.template.html',\n    controller: ['$routeParams', 'DiagnosticTest', '$rootScope', '$location', '$http',\n      function OnlineTestController($routeParams, DiagnosticTest, $rootScope, $location, $http) {\n        var self = this;\n        self.standard_form_class = \"hidden\" \n\n        self.submitStudentForm = function(){\n          DiagnosticTest.setData('user', {data:{\n              first_name: self.user.first_name,\n              last_name: self.user.last_name,\n              email: self.user.number.toString() + \"@resopccp.com\",\n              number: self.user.number\n            }}\n          )\n\n          if (self.standard_form_class == \"hidden\"){\n            DiagnosticTest.http.get_attempt_details({\n              number: self.user.number\n            }, function(data){\n              if (data.personalized.count > 0){\n                DiagnosticTest.setData('standard_id', {data:data.standards.standard_id});\n                DiagnosticTest.setData('personalized', {data:true})\n                DiagnosticTest.attempt_ready(true);\n                $location.url('/online-test/attempt')\n              } else {\n                // DiagnosticTest.http.get_standards({}, function(data){\n                //   self.standards = data.standards\n                //   console.log(self.standards);\n                // })\n                self.standards = data.standards\n                for (var key in data.standards){\n                  self.streams[data.standards[key].standard_id] = data.standards[key].streams\n                }\n                self.standard_form_class = \"shown\"\n              }\n            })\n          } else if (self.standard_id) {\n            DiagnosticTest.setData('standard_id', {data:self.standard_id})\n            DiagnosticTest.setData('stream_id', {data:self.stream_id})\n            DiagnosticTest.attempt_ready(true);\n            $location.url('/online-test/attempt')\n          }\n        }\n\n        // DiagnosticTest.http.get_standards({}, function(data){\n        //   self.standards = data.standards\n        //   console.log(self.standards);\n        // })\n\n        self.user = {\n          first_name:'Neeraj',\n          last_name: 'Resonance-PCCP',\n          number:9740644522,\n          email: '9740644522@resopccp.com'\n        }\n        self.streams = {}\n        self.standard_id = null\n        self.stream_id = null\n        self.subject_id = '';\n\n        $(document).ready(function(){\n          $(\"#sidebar-wrapper\").html(\"\")\n        })\n\n      }\n    ]\n  });\n","'use strict';\n\n// Register `phoneDetail` component, along with its associated controller and template\nangular.\n  module('onlineTest').\n  component('attempt', {\n    templateUrl: 'online-test/attempt.template.html',\n    controller: ['DiagnosticTest', '$scope', '$location',\n      function AttemptController(DiagnosticTest, $scope, $location) {\n        if (DiagnosticTest.attempt_ready() == false){\n          $location.url(\"/online-test/\")\n        }\n        console.log(\"This is AttemptController\");\n        console.log(DiagnosticTest.getAllData())\n        var self = this;\n        self.test_start_text = \"Hi \" + (DiagnosticTest.getData('user') ? DiagnosticTest.getData('user').first_name : \"\") + \", We have got a personalized test for you designed to improve your week areas based on your last attempt here :)\"  \n        if (DiagnosticTest.getData('personalized')){\n          var test_params = {\n            standard_id: DiagnosticTest.getData('standard_id'),\n            subject_id: DiagnosticTest.getData('standard_id'),\n            personalization_type:1,\n            diagnostic_test_id:1,\n            number:DiagnosticTest.getData('user').number\n          }\n        } else {\n          var test_params = {\n            standard_id: DiagnosticTest.getData('standard_id'),\n            subject_id: DiagnosticTest.getData('standard_id'),\n            stream_id: DiagnosticTest.getData('stream_id'),\n          }\n        }\n\n        DiagnosticTest.http.get_test( test_params , function(data){\n            self.build_diagnostic_test_data(data)\n          }\n        )\n\n        self.current_question_index = 0;\n\n        self.change_question = function(question_index){\n          try {\n            if (typeof question_index == \"string\"){\n              question_index = parseInt(question_index)\n              console.log(question_index)\n            }\n          } catch(err){\n            console.log(err)\n            return\n          }\n\n          if(question_index < self.fetched_questions.length){\n            self.current_question_index = question_index\n            self.reset_timer()\n          }\n          self.question_status_data[question_index] = {class:\"attempting\", attempt:1}\n          DiagnosticTest.setData('question_status_data', {data:self.question_status_data})\n          $(\"#side_panel_question_\"+self.current_question_index).removeClass(\"untouched\").addClass(\"attempting\")\n        }\n\n        self.reset_timer = function(){\n          self.current_question_start_time = Date.now();\n        }\n        self.reset_timer();\n\n        self.get_time_spent = function(){\n          return (Date.now() - self.current_question_start_time)/1000\n        }\n\n        self.get_displayed_question_index = function(){\n          return self.current_question_index;\n        }\n\n\n        self.build_diagnostic_test_data = function(data){\n          self.diagnostic_test_data = {\n            user: DiagnosticTest.getData(\"user\"),\n            diagnostic_test: {\n              id: data.diagnostic_test_id,\n              short_choice_questions: {\n              }\n            }\n          }\n          self.fetched_questions = data.questions\n          self.question_status_data = []\n          $.each(self.fetched_questions, function(key, value) {\n            self.question_status_data.push({class:\"untouched\"})\n            self.diagnostic_test_data.diagnostic_test.short_choice_questions[value.short_choice_question_id] = {\n              question_text: value.question_text,\n              attempt_count:0,\n              attempt:self.question_status_data[key].attempt || 0,\n              index: key,\n              score: 0,\n              time_taken:0,\n              selected_answers: {}\n            }\n          });\n          DiagnosticTest.setData(\"question_status_data\", {data:self.question_status_data})\n          $(document).ready(function(){\n            $(\"#sidebar-wrapper\").html(\"\").html('<div id=\"sidebar-question-index\"><p>Question list</p><div id=\"side-panel-questions\"></div></div>');\n            var html = \"\";\n            for (var i=0; i<self.fetched_questions.length;i++){\n              html += '<span id=\"side_panel_question_'+i+'\">'+(i+1)+'</span>'\n            }\n            html += '<br><br><button id=\"test_submit_btn\" type=\"button\" class=\"btn btn-success\">Submit test</button>'\n            $(\"#side-panel-questions\").html(\"\").append(html)\n            $(\"#test_submit_btn\").on(\"click\", function(){\n              DiagnosticTest.http.submit_test(self.diagnostic_test_data, function(data){\n                DiagnosticTest.setData('diagnostic_test_result', {data:{\n                  personalized_test_remaining: data.personalized_test_remaining,\n                  result: data.result,\n                  weak_entity: data.weak_entity \n                }})\n                $location.url('/online-test/result')\n              })\n            })\n          })\n          $(\"#side_panel_question_\"+self.get_displayed_question_index()).removeClass(\"untouched\").addClass(\"attempting\")\n          $(\"#sidebar-question-index span\").on(\"click\",function(event){\n            $(\"#side_panel_question_\"+self.get_displayed_question_index()).removeClass(\"attempting\")\n            $scope.$apply(function(){\n              self.change_question(parseInt($(event.currentTarget).html()) - 1)\n            })\n          })\n          $(\"#start-test-btn\").prop(\"disabled\", false).on(\"click\", function(){\n            self.change_question(0);\n          })     \n        }\n\n\n        self.select_answer = function(question_id, answer_index){\n          $(\"#side_panel_question_\"+self.get_displayed_question_index()).removeClass(\"untouched\").removeClass(\"attempting\").addClass(\"attempted\")\n          var answer_object = self.fetched_questions[self.get_displayed_question_index()].answers[answer_index];\n          var present_question = self.diagnostic_test_data.diagnostic_test.short_choice_questions[question_id]\n          present_question.attempt_count += 1\n          present_question.attempt = answer_object.correct ? 3 : 2\n          present_question.selected_answers[answer_object.short_choice_answer_id] = {\n            text: answer_object.answer_text,\n            index: present_question.attempt_count,\n            time_taken: self.get_time_spent(),\n          }\n\n          if (answer_object.correct){\n            var max_score = 1000\n            var max_time_allotted = 90\n            var time_elapsed = self.get_time_spent()\n            if (time_elapsed <= (max_time_allotted / 3)) {\n              present_question.score = max_score;\n            }else if((time_elapsed > (max_time_allotted / 3))&&(time_elapsed < (max_time_allotted))){\n              present_question.score = ((29 * max_time_allotted - 27 * time_elapsed) * (max_score)) / (20 * max_time_allotted);\n            }else {\n              present_question.score = max_score / 10;\n            }\n          }\n\n          self.question_status_data[self.get_displayed_question_index()] = {class:'attempted'}\n          present_question.answer_selected = answer_object.short_choice_answer_id;\n          present_question.time_taken += self.get_time_spent();\n          if (self.current_question_index < self.fetched_questions.length){\n            self.change_question(self.get_displayed_question_index() + 1);\n          }\n        }\n\n      }\n    ]\n  });\n\nangular.\n  module('onlineTest').directive('mathJaxBind', function() {\n  var refresh = function(element) {\n      MathJax.Hub.Queue([\"Typeset\", MathJax.Hub, element]);\n  };\n  return {\n    link: function(scope, element, attrs) {\n      scope.$watch(attrs.mathJaxBind, function(newValue, oldValue) {\n        element.html(newValue);\n        refresh(element[0]);\n      });\n    }\n  };\n});\n","'use strict';\n\n// Register `phoneDetail` component, along with its associated controller and template\nangular.\n  module('onlineTest').\n  component('result', {\n    templateUrl: 'online-test/result.template.html',\n    controller: ['DiagnosticTest', '$scope', '$location',\n      function ResultController(DiagnosticTest, $scope, $location) {        \n        this.diagnostic_test_result = DiagnosticTest.getData('diagnostic_test_result')\n        this.color_labels = [\"LightGoldenRodYellow\", \"Aquamarine\", \"DarkGrey\", \"DeepSkyBlue\", \"FloralWhite\", \"LavenderBlush\"]\n        console.log(this.diagnostic_test_result);     \n        \n        $(document).ready(function(){\n          $(\"#sidebar-wrapper\").html(\"\").html('<button class=\"btn btn-default\" id=\"test_retake_btn\" type=\"button\">Start Test</button>')\n          $(\"#test_retake_btn\").on(\"click\", function(){\n            console.log(\"clicked\");\n            DiagnosticTest.clearAllData();\n            $scope.$apply(function(){\n              $location.url('/online-test/');\n            })\n          })\n        })\n      }\n    ]\n  })"],"sourceRoot":"/source/"}